"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_ts"],{

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var snake_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! snake_game */ \"../pkg/snake_game.js\");\n/* harmony import */ var snake_game_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! snake_game/snake_game_bg.wasm */ \"../pkg/snake_game_bg.wasm\");\n/* harmony import */ var _utils_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/random */ \"./utils/random.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([snake_game__WEBPACK_IMPORTED_MODULE_0__, snake_game_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_2__]);\n([snake_game__WEBPACK_IMPORTED_MODULE_0__, snake_game_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nfunction init() {\n    var CELL_SIZE = 30;\n    var WORLD_WIDTH = 8;\n    var snakeSpawnIdx = (0,_utils_random__WEBPACK_IMPORTED_MODULE_1__.rnd)(WORLD_WIDTH * WORLD_WIDTH);\n    var world = snake_game__WEBPACK_IMPORTED_MODULE_0__.World.new(WORLD_WIDTH, snakeSpawnIdx);\n    var worldWidht = world.get_width();\n    var points = document.getElementById(\"points\");\n    var canvas = document.getElementById(\"snake-canvas\");\n    var gameStatus = document.getElementById(\"game-status\");\n    var gameControlBtn = document.getElementById(\"game-control-btn\");\n    var ctx = canvas.getContext(\"2d\");\n    canvas.height = worldWidht * CELL_SIZE;\n    canvas.width = worldWidht * CELL_SIZE;\n    gameControlBtn.addEventListener(\"click\", function (_) {\n        var status = world.get_game_status();\n        if (!status) {\n            gameControlBtn.textContent = \"Playing...\";\n            world.start_game();\n            play();\n        }\n        else {\n            location.reload();\n        }\n    });\n    var directions = {\n        ArrowUp: function () { return world.change_snake_dir(snake_game__WEBPACK_IMPORTED_MODULE_0__.Direction.Up); },\n        ArrowDown: function () { return world.change_snake_dir(snake_game__WEBPACK_IMPORTED_MODULE_0__.Direction.Down); },\n        ArrowLeft: function () { return world.change_snake_dir(snake_game__WEBPACK_IMPORTED_MODULE_0__.Direction.Left); },\n        ArrowRight: function () { return world.change_snake_dir(snake_game__WEBPACK_IMPORTED_MODULE_0__.Direction.Right); },\n    };\n    document.addEventListener(\"keydown\", function (e) {\n        var direction = directions[e.code];\n        if (direction)\n            direction();\n        // You can use the direction value as needed\n    });\n    function drawWorld() {\n        ctx.beginPath();\n        // Drawing vertical lines\n        for (var x = 0; x <= worldWidht; x++) {\n            ctx.moveTo(CELL_SIZE * x, 0);\n            ctx.lineTo(CELL_SIZE * x, worldWidht * CELL_SIZE);\n        }\n        // Drawing horizontal lines\n        for (var y = 0; y <= worldWidht; y++) {\n            ctx.moveTo(0, CELL_SIZE * y);\n            ctx.lineTo(worldWidht * CELL_SIZE, CELL_SIZE * y);\n        }\n        ctx.stroke();\n    }\n    function drawApple() {\n        var idx = world.get_apple();\n        // console.log(\"apple index is:\", idx);\n        var col = idx % worldWidht;\n        var row = Math.floor(idx / worldWidht);\n        // console.log(`apple ar row ${row + 1} and col ${col + 1}`);\n        ctx.beginPath();\n        ctx.fillStyle = \"#FF0000\";\n        ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        ctx.stroke();\n    }\n    function drawSnake() {\n        var snakeCells = new Uint32Array(snake_game_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_2__.memory.buffer, world.snake_cell_ptr(), world.get_snake_length());\n        // console.log(\"Snake cell\", snakeCells);\n        // debugger;\n        snakeCells\n            .filter(function (cellIdx, idx) { return !(idx > 0 && cellIdx === snakeCells[0]); })\n            .forEach(function (cellIdx, idx) {\n            var col = cellIdx % worldWidht; // gets reminder of division to get the column number independently of the row\n            var row = Math.floor(cellIdx / worldWidht);\n            ctx.fillStyle = idx === 0 ? \"#7878db\" : \"#000000\";\n            ctx.beginPath();\n            ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n            ctx.stroke();\n        });\n    }\n    function drawGameStatus() {\n        gameStatus.textContent = world.get_game_status_text();\n        points.textContent = world.get_points().toString();\n    }\n    function paint() {\n        drawWorld();\n        drawSnake();\n        drawApple();\n        drawGameStatus();\n    }\n    function play() {\n        var status = world.get_game_status();\n        if (status === snake_game__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Lost || status === snake_game__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Won) {\n            gameControlBtn.textContent = \"Re-play\";\n            return;\n        }\n        var fps = 4;\n        setTimeout(function () {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            world.next_position();\n            paint();\n            requestAnimationFrame(play);\n        }, 1000 / fps);\n    }\n    // debugger;\n    paint();\n}\ninit();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://create-wasm-app/./index.ts?");

/***/ }),

/***/ "./utils/random.js":
/*!*************************!*\
  !*** ./utils/random.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rnd: () => (/* binding */ rnd)\n/* harmony export */ });\nfunction rnd(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://create-wasm-app/./utils/random.js?");

/***/ }),

/***/ "../pkg/snake_game.js":
/*!****************************!*\
  !*** ../pkg/snake_game.js ***!
  \****************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direction: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.Direction),\n/* harmony export */   GameStatus: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.GameStatus),\n/* harmony export */   World: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.World),\n/* harmony export */   __wbg_rnd_d35593d8e2d6e500: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_rnd_d35593d8e2d6e500),\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm),\n/* harmony export */   __wbindgen_throw: () => (/* reexport safe */ _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_throw)\n/* harmony export */ });\n/* harmony import */ var _snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./snake_game_bg.wasm */ \"../pkg/snake_game_bg.wasm\");\n/* harmony import */ var _snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snake_game_bg.js */ \"../pkg/snake_game_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_1__]);\n_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n(0,_snake_game_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm)(_snake_game_bg_wasm__WEBPACK_IMPORTED_MODULE_1__);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://create-wasm-app/../pkg/snake_game.js?");

/***/ }),

/***/ "../pkg/snake_game_bg.js":
/*!*******************************!*\
  !*** ../pkg/snake_game_bg.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direction: () => (/* binding */ Direction),\n/* harmony export */   GameStatus: () => (/* binding */ GameStatus),\n/* harmony export */   World: () => (/* binding */ World),\n/* harmony export */   __wbg_rnd_d35593d8e2d6e500: () => (/* binding */ __wbg_rnd_d35593d8e2d6e500),\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbindgen_throw: () => (/* binding */ __wbindgen_throw)\n/* harmony export */ });\n/* harmony import */ var _snippets_snake_game_027f5cd2d64d2885_www_utils_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/snake_game-027f5cd2d64d2885/www/utils/random.js */ \"../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/random.js\");\n\n\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Down:1,\"1\":\"Down\",Left:2,\"2\":\"Left\",Right:3,\"3\":\"Right\", });\n/**\n*/\nconst GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Playing:2,\"2\":\"Playing\", });\n\nconst WorldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_world_free(ptr >>> 0));\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(World.prototype);\n        obj.__wbg_ptr = ptr;\n        WorldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WorldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} snake_idx\n    * @returns {World}\n    */\n    static new(width, snake_idx) {\n        const ret = wasm.world_new(width, snake_idx);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get_width() {\n        const ret = wasm.world_get_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    get_apple() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_get_apple(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    get_points() {\n        const ret = wasm.world_get_points(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_snake_head() {\n        const ret = wasm.world_get_snake_head(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.__wbg_ptr);\n    }\n    /**\n    * @returns {GameStatus | undefined}\n    */\n    get_game_status() {\n        const ret = wasm.world_get_game_status(this.__wbg_ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    get_game_status_text() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_get_game_status_text(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Direction} direction\n    */\n    change_snake_dir(direction) {\n        wasm.world_change_snake_dir(this.__wbg_ptr, direction);\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cell_ptr() {\n        const ret = wasm.world_snake_cell_ptr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_snake_length() {\n        const ret = wasm.world_get_snake_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    next_position() {\n        wasm.world_next_position(this.__wbg_ptr);\n    }\n}\n\nfunction __wbg_rnd_d35593d8e2d6e500(arg0) {\n    const ret = (0,_snippets_snake_game_027f5cd2d64d2885_www_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.rnd)(arg0 >>> 0);\n    return ret;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack://create-wasm-app/../pkg/snake_game_bg.js?");

/***/ }),

/***/ "../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/random.js":
/*!***********************************************************************!*\
  !*** ../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/random.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rnd: () => (/* binding */ rnd)\n/* harmony export */ });\nfunction rnd(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://create-wasm-app/../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/random.js?");

/***/ }),

/***/ "../pkg/snake_game_bg.wasm":
/*!*********************************!*\
  !*** ../pkg/snake_game_bg.wasm ***!
  \*********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./snake_game_bg.js */ \"../pkg/snake_game_bg.js\");\nmodule.exports = __webpack_require__.v(exports, module.id, \"922e61cdb65e501dba33\", {\n\t\"./snake_game_bg.js\": {\n\t\t\"__wbg_rnd_d35593d8e2d6e500\": WEBPACK_IMPORTED_MODULE_0.__wbg_rnd_d35593d8e2d6e500,\n\t\t\"__wbindgen_throw\": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw\n\t}\n});\n\n//# sourceURL=webpack://create-wasm-app/../pkg/snake_game_bg.wasm?");

/***/ })

}]);